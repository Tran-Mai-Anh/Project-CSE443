// <auto-generated />
using System;
using Cosmetic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cosmetic.Migrations
{
    [DbContext(typeof(CosmeticContext))]
    partial class CosmeticContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cosmetic.Models.AddressShipping", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefaultAddress")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("AddressShipping");
                });

            modelBuilder.Entity("Cosmetic.Models.Admin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Cosmetic.Models.Cart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Cosmetic.Models.CartItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CartId")
                        .HasColumnType("bigint");

                    b.Property<double>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<double>("ProductDiscount")
                        .HasColumnType("float");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Cosmetic.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Cosmetic.Models.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("LoyalPoints")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RankId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Cosmetic.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<double>("LoyalPointEarned")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProductDiscount")
                        .HasColumnType("float");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RankDiscount")
                        .HasColumnType("float");

                    b.Property<double>("TotalDiscount")
                        .HasColumnType("float");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Cosmetic.Models.OrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("ProductDiscount")
                        .HasColumnType("float");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("Cosmetic.Models.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("InStock")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Cosmetic.Models.ProductVariant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("InStock")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariant");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            InStock = 120,
                            Name = "12ml",
                            Price = 56.0,
                            ProductId = 6L
                        },
                        new
                        {
                            Id = 2L,
                            InStock = 80,
                            Name = "18ml",
                            Price = 80.0,
                            ProductId = 6L
                        },
                        new
                        {
                            Id = 3L,
                            InStock = 50,
                            Name = "24ml",
                            Price = 100.0,
                            ProductId = 6L
                        },
                        new
                        {
                            Id = 4L,
                            InStock = 100,
                            Name = "10g",
                            Price = 35.0,
                            ProductId = 7L
                        },
                        new
                        {
                            Id = 5L,
                            InStock = 75,
                            Name = "15g",
                            Price = 52.0,
                            ProductId = 7L
                        },
                        new
                        {
                            Id = 6L,
                            InStock = 75,
                            Name = "20g",
                            Price = 65.0,
                            ProductId = 7L
                        },
                        new
                        {
                            Id = 7L,
                            InStock = 70,
                            Name = "8g",
                            Price = 30.0,
                            ProductId = 8L
                        },
                        new
                        {
                            Id = 8L,
                            InStock = 50,
                            Name = "12g",
                            Price = 45.0,
                            ProductId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            InStock = 30,
                            Name = "15g",
                            Price = 55.0,
                            ProductId = 8L
                        },
                        new
                        {
                            Id = 10L,
                            InStock = 80,
                            Name = "5ml",
                            Price = 22.0,
                            ProductId = 9L
                        },
                        new
                        {
                            Id = 11L,
                            InStock = 70,
                            Name = "10ml",
                            Price = 35.0,
                            ProductId = 9L
                        },
                        new
                        {
                            Id = 12L,
                            InStock = 50,
                            Name = "15ml",
                            Price = 50.0,
                            ProductId = 9L
                        },
                        new
                        {
                            Id = 13L,
                            InStock = 60,
                            Name = "6ml",
                            Price = 20.0,
                            ProductId = 10L
                        },
                        new
                        {
                            Id = 14L,
                            InStock = 50,
                            Name = "10ml",
                            Price = 32.0,
                            ProductId = 10L
                        },
                        new
                        {
                            Id = 15L,
                            InStock = 40,
                            Name = "12ml",
                            Price = 40.0,
                            ProductId = 10L
                        },
                        new
                        {
                            Id = 16L,
                            InStock = 100,
                            Name = "3ml",
                            Price = 15.0,
                            ProductId = 11L
                        },
                        new
                        {
                            Id = 17L,
                            InStock = 100,
                            Name = "5ml",
                            Price = 25.0,
                            ProductId = 11L
                        },
                        new
                        {
                            Id = 18L,
                            InStock = 80,
                            Name = "8ml",
                            Price = 35.0,
                            ProductId = 11L
                        },
                        new
                        {
                            Id = 19L,
                            InStock = 110,
                            Name = "10ml",
                            Price = 53.0,
                            ProductId = 12L
                        },
                        new
                        {
                            Id = 20L,
                            InStock = 80,
                            Name = "15ml",
                            Price = 75.0,
                            ProductId = 12L
                        },
                        new
                        {
                            Id = 21L,
                            InStock = 60,
                            Name = "20ml",
                            Price = 90.0,
                            ProductId = 12L
                        },
                        new
                        {
                            Id = 22L,
                            InStock = 100,
                            Name = "3g",
                            Price = 20.0,
                            ProductId = 13L
                        },
                        new
                        {
                            Id = 23L,
                            InStock = 80,
                            Name = "5g",
                            Price = 30.0,
                            ProductId = 13L
                        },
                        new
                        {
                            Id = 24L,
                            InStock = 70,
                            Name = "8g",
                            Price = 40.0,
                            ProductId = 13L
                        },
                        new
                        {
                            Id = 25L,
                            InStock = 90,
                            Name = "12ml",
                            Price = 72.0,
                            ProductId = 14L
                        },
                        new
                        {
                            Id = 26L,
                            InStock = 80,
                            Name = "18ml",
                            Price = 95.0,
                            ProductId = 14L
                        },
                        new
                        {
                            Id = 27L,
                            InStock = 80,
                            Name = "24ml",
                            Price = 120.0,
                            ProductId = 14L
                        },
                        new
                        {
                            Id = 28L,
                            InStock = 40,
                            Name = "30ml",
                            Price = 45.0,
                            ProductId = 15L
                        },
                        new
                        {
                            Id = 29L,
                            InStock = 30,
                            Name = "50ml",
                            Price = 75.0,
                            ProductId = 15L
                        },
                        new
                        {
                            Id = 30L,
                            InStock = 30,
                            Name = "100ml",
                            Price = 120.0,
                            ProductId = 15L
                        },
                        new
                        {
                            Id = 31L,
                            InStock = 40,
                            Name = "15g",
                            Price = 62.0,
                            ProductId = 16L
                        },
                        new
                        {
                            Id = 32L,
                            InStock = 30,
                            Name = "25g",
                            Price = 90.0,
                            ProductId = 16L
                        },
                        new
                        {
                            Id = 33L,
                            InStock = 30,
                            Name = "35g",
                            Price = 115.0,
                            ProductId = 16L
                        },
                        new
                        {
                            Id = 34L,
                            InStock = 20,
                            Name = "30ml",
                            Price = 80.0,
                            ProductId = 17L
                        },
                        new
                        {
                            Id = 35L,
                            InStock = 15,
                            Name = "50ml",
                            Price = 115.0,
                            ProductId = 17L
                        },
                        new
                        {
                            Id = 36L,
                            InStock = 15,
                            Name = "100ml",
                            Price = 165.0,
                            ProductId = 17L
                        },
                        new
                        {
                            Id = 37L,
                            InStock = 150,
                            Name = "Standard",
                            Price = 25.0,
                            ProductId = 18L
                        },
                        new
                        {
                            Id = 38L,
                            InStock = 100,
                            Name = "30ml",
                            Price = 15.0,
                            ProductId = 19L
                        },
                        new
                        {
                            Id = 39L,
                            InStock = 80,
                            Name = "60ml",
                            Price = 25.0,
                            ProductId = 19L
                        },
                        new
                        {
                            Id = 40L,
                            InStock = 70,
                            Name = "100ml",
                            Price = 40.0,
                            ProductId = 19L
                        },
                        new
                        {
                            Id = 41L,
                            InStock = 50,
                            Name = "Standard",
                            Price = 95.0,
                            ProductId = 20L
                        },
                        new
                        {
                            Id = 42L,
                            InStock = 150,
                            Name = "Small",
                            Price = 5.0,
                            ProductId = 21L
                        },
                        new
                        {
                            Id = 43L,
                            InStock = 120,
                            Name = "Medium",
                            Price = 8.0,
                            ProductId = 21L
                        },
                        new
                        {
                            Id = 44L,
                            InStock = 80,
                            Name = "Large",
                            Price = 12.0,
                            ProductId = 21L
                        },
                        new
                        {
                            Id = 45L,
                            InStock = 20,
                            Name = "5ml",
                            Price = 15.0,
                            ProductId = 22L
                        },
                        new
                        {
                            Id = 46L,
                            InStock = 15,
                            Name = "10ml",
                            Price = 25.0,
                            ProductId = 22L
                        },
                        new
                        {
                            Id = 47L,
                            InStock = 15,
                            Name = "15ml",
                            Price = 35.0,
                            ProductId = 22L
                        },
                        new
                        {
                            Id = 48L,
                            InStock = 20,
                            Name = "15g",
                            Price = 92.0,
                            ProductId = 23L
                        },
                        new
                        {
                            Id = 49L,
                            InStock = 15,
                            Name = "20g",
                            Price = 120.0,
                            ProductId = 23L
                        },
                        new
                        {
                            Id = 50L,
                            InStock = 15,
                            Name = "25g",
                            Price = 145.0,
                            ProductId = 23L
                        });
                });

            modelBuilder.Entity("Cosmetic.Models.Rank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RequiredPoint")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Rank");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Discount = 0.0,
                            Name = "NONE",
                            RequiredPoint = 0.0
                        },
                        new
                        {
                            Id = 2L,
                            Discount = 2.0,
                            Name = "SILVER",
                            RequiredPoint = 2000.0
                        },
                        new
                        {
                            Id = 3L,
                            Discount = 5.0,
                            Name = "GOLD",
                            RequiredPoint = 5000.0
                        },
                        new
                        {
                            Id = 4L,
                            Discount = 7.0,
                            Name = "PLATINUM",
                            RequiredPoint = 7000.0
                        });
                });

            modelBuilder.Entity("Cosmetic.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Cosmetic.Models.AddressShipping", b =>
                {
                    b.HasOne("Cosmetic.Models.Customer", "Customer")
                        .WithMany("AddressShippings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Cosmetic.Models.Admin", b =>
                {
                    b.HasOne("Cosmetic.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Cosmetic.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cosmetic.Models.Cart", b =>
                {
                    b.HasOne("Cosmetic.Models.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("Cosmetic.Models.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Cosmetic.Models.CartItem", b =>
                {
                    b.HasOne("Cosmetic.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cosmetic.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Cosmetic.Models.Customer", b =>
                {
                    b.HasOne("Cosmetic.Models.Rank", "Rank")
                        .WithMany("Customers")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cosmetic.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Cosmetic.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cosmetic.Models.Order", b =>
                {
                    b.HasOne("Cosmetic.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Cosmetic.Models.OrderDetail", b =>
                {
                    b.HasOne("Cosmetic.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cosmetic.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Cosmetic.Models.Product", b =>
                {
                    b.HasOne("Cosmetic.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Cosmetic.Models.ProductVariant", b =>
                {
                    b.HasOne("Cosmetic.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Cosmetic.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Cosmetic.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Cosmetic.Models.Customer", b =>
                {
                    b.Navigation("AddressShippings");

                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Cosmetic.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Cosmetic.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductVariants");
                });

            modelBuilder.Entity("Cosmetic.Models.Rank", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Cosmetic.Models.User", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
